{"/home/travis/build/npmtest/node-npmtest-hipchatter/test.js":"/* istanbul instrument in package npmtest_hipchatter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hipchatter/lib.npmtest_hipchatter.js":"/* istanbul instrument in package npmtest_hipchatter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hipchatter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hipchatter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hipchatter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hipchatter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hipchatter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hipchatter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hipchatter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hipchatter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hipchatter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hipchatter.__dirname + '/lib.npmtest_hipchatter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hipchatter/node_modules/hipchatter/hipchatter.js":"//  Dependencies\nvar needle = require('needle');\nvar async = require('async');\n\n//  Hipchatter constructor\nvar Hipchatter = function(token, api_root) {\n    this.token = token;\n    this.api_root = api_root || 'https://api.hipchat.com/v2/';\n}\n\n// Turns logging on for debugging\n// var DEBUG = true;\nvar DEBUG = false;\n\n//  Hipchatter functions\nHipchatter.prototype = {\n\n    // Get capabilities\n    // https://www.hipchat.com/docs/apiv2/method/get_capabilities\n    capabilities: function(callback) {\n        // Make a request without an auth token, since only unauthorized users are allowed to call this resource\n        this.request('get', 'capabilities', {'token': ''}, callback);\n    },\n\n    // Updates a room\n    // https://www.hipchat.com/docs/apiv2/method/update_room\n    update_room: function(params, callback) {\n        this.request('put', 'room/'+params.name, params, callback)\n    },\n\n    // Create a new room\n    // https://www.hipchat.com/docs/apiv2/method/create_room\n    create_room: function(params, callback){\n        this.request('post', 'room', params, callback);\n    },\n\n    // Delete a room\n    // https://www.hipchat.com/docs/apiv2/method/delete_room\n    delete_room: function(room, callback){\n        this.request('delete', 'room/'+room, callback);\n    },\n\n    // Get all rooms\n    // https://www.hipchat.com/docs/apiv2/method/get_all_rooms\n    rooms: function(callback){\n        this.request('get', 'room', function(err, results){\n            if (err) callback(err);\n            else callback(err, results.items);\n        });\n    },\n\n    // Get room\n    // https://www.hipchat.com/docs/apiv2/method/get_room\n    get_room: function(room, callback){\n        this.request('get', 'room/'+room, callback);\n    },\n    // Add a member to a room\n    // https://www.hipchat.com/docs/apiv2/method/add_member\n    add_member: function(params, callback) {\n        this.request('put', 'room/'+params.room_name+'/member/'+params.user_email, callback);\n    },\n    // Delete a member from a room\n    // https://www.hipchat.com/docs/apiv2/method/remove_member\n    delete_member: function(params, callback) {\n        this.request('delete', 'room/'+params.room_name+'/member/'+params.user_email, callback);\n    },\n    // Invite a user to a room.\n    // https://www.hipchat.com/docs/apiv2/method/invite_member\n    invite_member: function(params, reason, callback) {\n        this.request('post', 'room/'+params.room_name+'/invite/'+params.user_email, reason, callback);\n    },\n    // Get history from room\n    // Takes either a room id or room name as a parameter\n    // https://www.hipchat.com/docs/apiv2/method/view_history\n    history: function(room, callback){\n        this.request('get', 'room/'+room+'/history', callback);\n    },\n    // Get all users\n    // https://www.hipchat.com/docs/apiv2/method/get_all_users\n    users: function(params, callback) {\n        if (this.isFunction(params)) { // No payload\n            callback = params;\n            params = {};\n        }\n        this.request('get', 'user', params, function(err, results) {\n            if(err) callback(err);\n            else callback(err, results.items);\n        });\n    },\n\n    // View user details\n    // https://www.hipchat.com/docs/apiv2/method/view_user\n    view_user: function(user, callback) {\n        this.request('get', 'user/'+user, callback);\n    },\n    // Update a user\n    // https://www.hipchat.com/docs/apiv2/method/update_user\n    update_user: function(params, callback) {\n        this.request('put', 'user/'+params.email, params, callback)\n    },\n    // Creates a user\n    // https://www.hipchat.com/docs/apiv2/method/create_user\n    create_user: function(params, callback) {\n        this.request('post', 'user', params, callback);\n    },\n    // Deletes a user\n    // https://www.hipchat.com/docs/apiv2/method/delete_user\n    delete_user: function(user, callback) {\n        this.request('delete', 'user/'+user, callback);\n    },\n    // Send a private message to a user\n    // https://www.hipchat.com/docs/apiv2/method/private_message_user\n    send_private_message: function(user, message, callback) {\n        this.request('post', 'user/'+user+'/message', message, callback);\n    },\n\n    // Get emoticons\n    //\n    // https://www.hipchat.com/docs/apiv2/method/get_all_emoticons\n    // params: {\n    //     'start-index': 0,\n    //     'max-results': 100,\n    //     'type': 'all'\n    // }\n    //\n    // or\n    //\n    // Get emoticon by shortcut or id\n    // https://www.hipchat.com/docs/apiv2/method/get_emoticon\n    //\n    // params = 34;\n    // params = 'fonzie';\n    //\n    emoticons: function(params, callback){\n        if (arguments.length === 1) { // only supplied a callback function\n            callback = params;\n            this.request('get', 'emoticon', function(err, results){\n                if (err) callback(err);\n                else callback(err, results.items);\n            });\n        } else if (arguments.length === 2) { // contains some type of param\n            if (typeof params === 'number' || typeof params === 'string') {\n                // get emoticon by id or shortcut\n                return this.get_emoticon(params, callback);\n            } else if (typeof params === 'object') {\n                // get all emoticons based on specified params\n                // resort to default params if input param doesn't exist or is incorrectly typed\n                var query = {\n                    'start-index': 'start-index' in params ? params['start-index'] : 0,\n                    'max-results': 'max-results' in params ? params['max-results'] : 100,\n                    'type': 'type' in params ? params['type'] : 'all',\n                };\n                this.request('get', 'emoticon', query, function(err, results){\n                    if (err) callback(err);\n                    else callback(err, results.items);\n                });\n            }\n        }\n    },\n\n    // Get emoticon by id or shortcut\n    // https://www.hipchat.com/docs/apiv2/method/get_emoticon\n    //\n    // param = 34; // id\n    // param = 'fonzie'; // shortcut\n    //\n    get_emoticon: function(param, callback) {\n        this.request('get', 'emoticon/' + param, callback);\n    },\n\n    // Uses the simple \"Room notification\" token\n    // https://www.hipchat.com/docs/apiv2/method/send_room_notification\n\n    // notify: function(room, message, token, callback){\n    //     var data = {\n    //         color: 'green',\n    //         message: message\n    //     }\n    //     needle.post(this.url('room/'+room+'/message', token), data, {json:true}, function(error, res, body){\n    //         if (!error && res.statusCode == 204) { callback(null, body); }\n    //         else callback(error, 'API connection error.');\n    //     });\n    // },\n    notify: function(room, options, callback){\n\n        // convenience function notify(room, message, token, callback)\n        if (typeof options == 'string') {\n            var message = arguments[1];\n            var token = arguments[2];\n            var callback = arguments[3];\n            this.request('post', 'room/'+room+'/notification', {message: message, token: token}, callback);\n        }\n        else if (typeof options != 'object' && typeof options == 'function') {\n            options(new Error('Must supply an options object to the notify function containing at least the message. See https://www.hipchat.com/docs/apiv2/method/send_room_notification'));\n        }\n        else if (!options.hasOwnProperty('message') ) {\n            callback(new Error('Message is required.'));\n        }\n        else this.request('post', 'room/'+room+'/notification', options, callback);\n    },\n    send_room_message: function(room, message, callback){\n        //https://www.hipchat.com/docs/apiv2/method/send_message\n        if (typeof message == \"string\") {\n            message = {message: message};\n        }\n        this.request('post', 'room/'+room+'/message', message, callback);\n    },\n    create_webhook: function(room, options, callback){\n        if (typeof options != 'object' && typeof options == 'function') {\n            options(new Error('Must supply an options object to the notify function containing at least the message and the room notification token. See https://www.hipchat.com/docs/apiv2/method/send_room_notification'));\n        }\n        else if (!options.hasOwnProperty('url') || (!options.hasOwnProperty('event'))) {\n            callback(new Error('URL and Event are required.'));\n        }\n        else this.request('post', 'room/'+room+'/webhook', options, callback);\n    },\n    get_webhook: function(room, id, callback){\n        this.request('get', 'room/'+room+'/webhook/'+id, callback);\n    },\n    webhooks: function(room, callback){\n        this.request('get', 'room/'+room+'/webhook', callback);\n    },\n    delete_webhook: function(room, id, callback){\n        needle.delete(this.url('room/'+room+'/webhook/'+id), null, function (error, response, body) {\n            // Connection error\n            if (!!error) callback(new Error('HipChat API Error.'));\n\n            // HipChat returned an error or no HTTP Success status code\n            else if (body.hasOwnProperty('error') || response.statusCode < 200 || response.statusCode >= 300){\n                try { callback(new Error(body.error.message)); }\n                catch (e) {callback(new Error(body)); }\n            }\n\n            // Everything worked\n            else {\n                callback(null, body);\n            }\n        });\n    },\n    delete_all_webhooks: function(room, callback){\n        var self = this;\n        this.webhooks(room, function(err, response){\n            if (err) return callback(new Error(response));\n\n            var hooks = response.items;\n            var hookCalls = [];\n            for (var i=0; i<hooks.length; i++){\n                // wrapper function to preserve context of hookId\n                (function(hookId){\n                    hookCalls[i] = function(done){\n                        self.delete_webhook(room, hookId, done);\n                    }\n                })(hooks[i].id);\n            }\n            async.parallel(hookCalls, callback);\n        });\n    },\n    set_topic: function(room, topic, callback){\n        this.request('put', 'room/'+room+'/topic', {topic: topic}, callback);\n    },\n    \n    /** EXTRAS **/\n    // functions that are not part of the official HipChat API\n\n    // Check if a room exists\n    room_exists: function(room, callback){\n        this.get_room(room, function(err, response){\n            if(err === null){\n                return callback(null, true);\n            }\n            else if (err.message.match(/Room .* not found/)){\n                return callback(null, false);\n            }\n            else {\n                console.log(err)\n                return callback(err)\n            }\n        });\n    },\n\n    /** HELPERS **/\n\n    // Generator API url\n    url: function(rest_path, query, alternate_token){\n        // inner helpers\n        var BASE_URL = this.api_root + rest_path + '?auth_token=';\n        var queryString = function(query) {\n            var query_string = '';\n            for (var key in query) {\n                query_string += ('&' + key + '=' + query[key]);\n            }\n            return query_string;\n        };\n\n        if (arguments.length === 1) { // only contains path\n            var url = BASE_URL + this.token;\n            if (DEBUG) console.log('URL REQUEST: ', url);\n            return url;\n        } else if (arguments.length === 2) { // contains query or alt token\n            if (typeof query === 'object') { // query {}\n                var url = BASE_URL + this.token + queryString(query);\n                if (DEBUG) console.log('URL REQUEST: ', url);\n                return url;\n            } else { // alt token\n                alternate_token = query;\n                var token = (alternate_token == undefined) ? this.token : alternate_token;\n                var url = BASE_URL + token;\n                if (DEBUG) console.log('URL REQUEST: ', url);\n                return url;\n            }\n        } else if (arguments.length === 3) {\n            var token = (alternate_token == undefined)? this.token : alternate_token;\n            var url = BASE_URL + token + queryString(query);\n            if (DEBUG) console.log('URL REQUEST: ', url);\n            return url;\n        }\n    },\n\n    // Make a request\n    // type: required - type of REST request ('get' or 'post' currently)\n    // path: required -\n    // payload: optional - query string data for 'get', ''\n    // callback: required -\n    request: function(type, path, payload, callback){\n        self = this;\n        if (this.isFunction(payload)) { // No payload\n            callback = payload;\n            payload = {};\n        }\n\n        var requestCallback = function (error, response, body) {\n            if (DEBUG) {console.log('RESPONSE: ', error, response, body);}\n\n            // Connection error\n            if (!!error) callback(new Error('HipChat API Error.'));\n\n            // Rate limit error\n            else if (response.statusCode == 429) {\n                var apitimeout, floodtimeout, reset, timeout;\n\n                error = body.error.message || body.error.toString();\n\n                //check if we hit the api rate limit\n                reset = response.headers[\"x-ratelimit-reset\"] * 1000;\n                if (reset > 0) {\n                    //assume that the reset value will be the unix timestamp\n                    //when the limiter will reset\n                    apitimeout = reset - (new Date());\n\n                    //if out timeout period is negative, that is probably\n                    //because instead of a unix timestamp, the reset value\n                    //is the number of seconds until the counter will reset.\n                    apitimeout = (apitimeout < 0 ? reset : apitimeout);\n                }\n            \n                //do the same for flood control\n                reset = response.headers[\"x-floodcontrol-reset\"] * 1000;\n                if (reset > 0) {\n                    floodtimeout = reset - (new Date());\n                    floodtimeout = (floodtimeout<0 ? reset : floodtimeout); \n                }\n\n                //choose which ever timeout is bigger.\n                //If neither are valid, just set it to 5 minutes\n                timeout =\n                  Math.max((+apitimeout || 0), (+floodtimeout || 0)) ||\n                  300000;\n\n                //wait until it is safe to resend the request\n                setTimeout(\n                    self.request.bind(self, type, path, payload, callback),\n                    timeout\n                );\n                if(DEBUG){\n                    console.log(\n                        \"Rate limit reached. Waiting \" + timeout +\n                        \" ms before resubmitting.\"\n                    );\n                }\n            }\n\n            // HipChat returned an error or no HTTP Success status code\n            else if (body.hasOwnProperty('error') || response.statusCode < 200 || response.statusCode >= 300){\n                try { callback(new Error(body.error.message)); }\n                catch (e) {callback(new Error(body)); }\n            }\n\n            // Everything worked\n            else {\n                if (self.isFunction(callback)) {\n                callback(null, body, response.statusCode);\n                }\n            }\n        };\n\n        // GET request\n        if (type.toLowerCase() === 'get') {\n            var url = payload.hasOwnProperty('token') ? this.url(path, payload, payload.token) : this.url(path, payload);\n            needle.get(url, requestCallback);\n\n        // POST request\n        } else if (type.toLowerCase() === 'post') {\n            var url = payload.hasOwnProperty('token') ? this.url(path, payload.token) : this.url(path);\n\n            needle.post(url, payload, {json: true, headers:{'Content-Type': 'application/json; charset=utf-8'}}, requestCallback);\n\n        // PUT request\n        } else if (type.toLowerCase() === 'put') {\n            needle.put(this.url(path), payload, {json: true, headers:{'Content-Type': 'application/json; charset=utf-8'}}, requestCallback);\n\n        // DELETE request\n        } else if (type.toLowerCase() === 'delete') {\n            needle.delete(this.url(path), {}, requestCallback);\n\n        // otherwise, something went wrong\n        } else {\n            if (self.isFunction(callback)) {\n            callback(new Error('Invalid use of the hipchatter.request function.'));\n            }\n        }\n    },\n\n    isFunction: function(obj) {\n        return !!(obj && obj.constructor && obj.call && obj.apply);\n    }\n    /** END HELPERS **/\n}\n\nmodule.exports = Hipchatter;\n","/home/travis/build/npmtest/node-npmtest-hipchatter/node_modules/hipchatter/utils/cleanup_webhooks.js":"var settings = require(__dirname+\"/../test/settings.json\");\nvar needle = require('needle')\nvar colors = require('colors')\n\n// Setup hipchatter\nvar Hipchatter = require(__dirname+'/../hipchatter.js');\nvar hipchatter = new Hipchatter(settings.apikey, settings.endpoint);\n\nhipchatter.webhooks(settings.test_room, function(err, response){\n    if (err !== null) {\n\n        // A room can't have webhooks if it doesn't exist\n        if (err.message == 'Room not found') return;\n\n        console.error(err);\n        return;\n    }\n    var webhooks = response.items;\n    if (webhooks.length == 0) console.log('No webhooks for this room'.green)\n    else console.log('Found '+webhooks.length+' for this room.');\n\n    //for each webhook\n    for (var i=0; i<webhooks.length; i++){\n        var url = webhooks[i].links.self+'?auth_token='+settings.apikey;\n        console.log(url);\n        needle.delete(url, {}, function(e, r, b){\n        });\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-hipchatter/node_modules/hipchatter/utils/list_webhooks.js":"var settings = require(__dirname+\"/../test/settings.json\");\nvar needle = require('needle')\nvar colors = require('colors')\n\n// Setup hipchatter\nvar Hipchatter = require(__dirname+'/../hipchatter.js');\nvar hipchatter = new Hipchatter(settings.apikey, settings.endpoint);\n\nhipchatter.webhooks(settings.test_room, function(err, response){\n    if (response.items.length == 0) console.log('No webhooks found'.green);\n    else console.log(response.items);\n});"}